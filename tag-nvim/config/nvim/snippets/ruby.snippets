snippet mod
	module ${1}
		${2}
	end
snippet cla
	class ${1}
		${2}
	end
snippet init
	def initialize(${1})
		${2}
	end
# shoulda matcher snippets
snippet it{
	it { should ${1}
snippet it'
	it "${1}" do
		${2}
	end
snippet it
	it "${1}" do
		${2}
	end
snippet it"
	it "${1}" do
		${2}
	end
snippet have_db
	have_db_column(:${1})
snippet have_att
	have_attached_file(:${1})
# factory girl
snippet fact
	factory :${1} do
		${2}
	end
# general
snippet pry
	binding.pry
snippet gem
	gem "${1}"
# rspec
snippet rhelp
	# frozen_string_literal: true

	require "rails_helper"
snippet shelp
	# frozen_string_literal: true

	require "spec_helper"
snippet desc
	RSpec.describe ${1}, ${2:type: :model} do
		${3}
	end
snippet cont
	context "${1}" do
		${2}
	end
snippet feat
	RSpec.feature "${1}", type: :feature do
		context "${2}" do
			scenario "${3}" do
				${4}
			end
		end
	end
snippet featobj
	module FeatureObject
		class ${1} < FeatureObject::Base
			${2}
		end
	end
snippet scen
	scenario "${1}" do
		${2}
	end
snippet request
	require "rails_helper"

	RSpec.describe "${1}", type: :request do
		describe "GET /path" do
			let(:user){ create(:user) }

			it "is successful" do
				#  allow_any_instance_of(ApplicationController)
				#    .to receive(:current_user)
				#    .and_return(user)

				payload = {
					resource: {
						name: "joel",
					}
				}

				get "/path", payload, {}

				expect(response).to have_http_status(200)
			end
		end
	end
snippet fro
	# frozen_string_literal: true
snippet open
	save_and_open_page
